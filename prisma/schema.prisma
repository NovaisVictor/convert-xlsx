// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(uuid())
  name         String?
  email        String    @unique
  passwordHash String
  avatarUrl    String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  isAdmin      Boolean   @default(false)
  owns_tables  Tables[]
  member_on    Member[]
  Company      Company[]
  Invite       Invite[]
}

model Tables {
  id         String   @id @default(uuid())
  name       String
  competence DateTime @default(now())
  fileJson   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  company   Company @relation(fields: [companyId], references: [id])
  companyId String

  owner   User   @relation(fields: [ownerId], references: [id])
  ownerId String
}

enum Role {
  SUPER_ADMIN
  ADMIN
  MEMBER
}

model Invite {
  id        String   @id @default(uuid())
  email     String
  role      Role
  createdAt DateTime @default(now())

  author   User?   @relation(fields: [authorId], references: [id], onDelete: SetNull)
  authorId String?

  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String

  @@unique([email, companyId])
  @@index([email])
  @@map("invites")
}

model Company {
  id        String   @id @default(uuid())
  name      String
  cnpj      String
  slug      String   @unique
  avatarUrl String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner   User?   @relation(fields: [ownerId], references: [id])
  ownerId String?

  members Member[]
  tables  Tables[]
  Invite  Invite[]
}

model Member {
  id String @id @default(uuid())

  company   Company @relation(fields: [companyId], references: [id])
  companyId String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  role Role @default(MEMBER)

  @@unique([companyId, userId])
  @@map("member")
}
