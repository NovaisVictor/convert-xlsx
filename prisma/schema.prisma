// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  name         String?
  email        String   @unique
  passwordHash String
  avatarUrl    String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  isAdmin      Boolean  @default(false)

  member_on     Member[]
  Company       Company[]
  Invite        Invite[]
  ImportedTable ImportedTable[]
}

model ImportedTable {
  id         String   @id @default(uuid())
  fileName   String
  fileHash   String   @unique
  competence DateTime

  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId String

  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String

  createdAt DateTime  @default(now())
  product   Product[]
}

model Product {
  id                String   @id @default(uuid())
  emission          DateTime
  productCode       String
  productDecription String
  nmcCode           String
  cfop              String
  icmsBase          String
  pisCofinsBase     String
  competence        DateTime

  importTable     ImportedTable @relation(fields: [importedTableId], references: [id], onDelete: Cascade)
  importedTableId String

  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String

  @@unique([companyId, productCode, competence])
  @@index([companyId, importedTableId, competence])
}

enum Role {
  SUPER_ADMIN
  ADMIN
  MEMBER
}

model Invite {
  id        String   @id @default(uuid())
  email     String
  role      Role
  createdAt DateTime @default(now())

  author   User?   @relation(fields: [authorId], references: [id], onDelete: SetNull)
  authorId String?

  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String

  @@unique([email, companyId])
  @@index([email])
  @@map("invites")
}

model Company {
  id        String   @id @default(uuid())
  name      String
  cnpj      String   @unique
  slug      String   @unique
  avatarUrl String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner   User?   @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId String?

  members       Member[]
  Invite        Invite[]
  Product       Product[]
  ImportedTable ImportedTable[]
}

model Member {
  id String @id @default(uuid())

  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  role Role @default(MEMBER)

  @@unique([companyId, userId])
  @@map("member")
}
